int findPivot(vector<int>& arr,int n){

    

    int s = 0;

    int e = n-1;

    int mid = s +(e - s)/2;

    

    while(s<e){

        if(arr[mid]>=arr[0]){

            s= mid +1;

        }

        else 

        e = mid;

    mid = s +(e-s)/2;

    }

    

    return s;

    

    

}

 

int binarySearch(vector<int>& arr,int start,int end,int n,int key){

    int s = start;

    int e = end;

    int mid = s + (e-s)/2;

    

    while(s<=e){

        if(arr[mid]==key){

                return mid;

        }

        

    

        

        else if(arr[mid]>key){

            e = mid-1;

        }

        

        else

         {

            s = mid +1;

         }

     mid = s + (e-s)/2;

    }

    return -1;

}

 

int search(vector<int>& arr, int n, int k)

{

   

 

   int pivot = findPivot(arr,n);

   //BS on second line

   if(k>=arr[pivot] && k<=arr[n-1]){

       return binarySearch(arr,pivot,n-1,n,k);

   }

 

   else 

   //BS on first line

   return binarySearch(arr,0,pivot-1,n,k);

 

   

}

 
